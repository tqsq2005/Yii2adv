<?php

/**
 * MenuController.php
 * ==============================================
 * 版权所有 2001-2015 http://www.zhmax.com
 * ----------------------------------------------
 * 这不是一个自由软件，未经授权不许任何使用和传播。
 * ----------------------------------------------
 * @date: 16-4-27
 * @author: LocoRoco<tqsq2005@gmail.com>
 * @version:v2016
 * @since:Yii2
 * ----------------------------------------------
 * 程序文件简介：
 * ==============================================
 */

namespace backend\controllers;

use backend\models\Menu;
use mdm\admin\components\MenuHelper;
use Yii;
use yii\base\Exception;
use yii\helpers\Json;
use yii\helpers\Url;
use yii\web\Response;

class MenuController extends \mdm\admin\controllers\MenuController
{
    /**
     * @inheritDoc
     */
    public function actionIndex()
    {
        //return parent::actionIndex(); // TODO: Change the autogenerated stub
        return $this->render('index');
    }

    /**
     * @inheritDoc
     */
    public function actionView($id)
    {
        return parent::actionView($id); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function actionCreate()
    {
        $model = new Menu;

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            MenuHelper::invalidate();
            Yii::$app->session->setFlash('info', '菜单[ ' . $model->name . ' ]添加成功！');
            return $this->redirect(['index']);
        } else {
            $model->parent_name = Yii::$app->request->get('parentName');
            return $this->renderAjax('create', [
                'model' => $model
            ]);
        }
    }

    /**
     * @inheritDoc
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        if ($model->menuParent) {
            $model->parent_name = $model->menuParent->name;
        }
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            MenuHelper::invalidate();
            Yii::$app->session->setFlash('info', '菜单[ ' . $model->name . ' ]更新成功！');
            return $this->redirect(['index']);
        } else {
            return $this->renderAjax('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * @inheritDoc
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();
        MenuHelper::invalidate();

        return $this->redirect(['index']);
    }

    /**
     * (void) actionTreenode : 生成目录树
     * @param string $unitcode
     */
    public function actionTree($id=1)
    {
        $model = new Menu();
        if($id == '#') {
            $id = 1;
        }
        $data = $model->getChildren($id);

        //VarDumper::dump($data);
        Yii::$app->response->format = Response::FORMAT_JSON;
        echo json_encode($data);
    }

    public function actionDetail()
    {
        $id = Yii::$app->request->post('id', '1');
        $name = Yii::$app->request->post('name', '计生管理系统');
        $helpmenu = new Menu();

        if($helpmenu->isParent($id)) {
            return $this->renderAjax('_menu-list', [
                'parent' => $id,
                'parentName' => $name,
            ]);
        } else {
            return $this->renderAjax('view', [
                'model' => $this->findModel($id),
            ]);
        }
    }

    public function actionDataTables()
    {
        $responseType = Yii::$app->request->get('type');
        $returnData = [];
        switch($responseType) {
            case "fetch":
                $returnData = Menu::find()->select([
                    'id', 'name', 'parent', 'route', 'order', 'data'
                ])->where([
                    'parent' => Yii::$app->request->get('id')
                ])->orderBy([
                    'order' => SORT_ASC,
                ])->all();
                return Json::encode($returnData);
            case "crud":
                $requestAction = Yii::$app->request->post('action');

                switch($requestAction) {
                    case "create":
                        $requestID  = key(Yii::$app->request->post('data'));
                        $requestData = Yii::$app->request->post('data')[$requestID];
                        $model = new Menu();
                        //块赋值
                        $model->attributes = $requestData;
                        //返回错误信息给datatable
                        if(!$model->validate()) {
                            $fieldErrors = [];
                            foreach($model->errors as $name => $status) {
                                $fieldErrors[] = [
                                    'name' => $name,
                                    'status' => Json::encode($status),
                                ];
                            }
                            return Json::encode(['fieldErrors' => $fieldErrors, 'data' => []]);
                        }
                        if($model->save()) {
                            $requestData['id'] = $model->id;
                            $data = [];
                            $data[] = $requestData;
                            return Json::encode(['data' => $data]);
                        } else {
                            var_dump($model->errors);
                            $error = '恢复操作发生意外！';
                            throw new Exception($error);
                        }
                    case "edit":
                        $editID = array_keys(Yii::$app->request->post('data'));
                        //执行事务，保存必须都成功了才行
                        $transaction = Menu::getDb()->beginTransaction();
                        //返回值
                        $data = [];
                        try {
                            foreach($editID as $requestID) {
                                $requestData = Yii::$app->request->post('data')[$requestID];
                                $model = Menu::findOne($requestID);
                                //块赋值
                                $model->attributes = $requestData;
                                //返回错误信息给datatable
                                if(!$model->validate()) {
                                    $fieldErrors = [];
                                    foreach($model->errors as $name => $status) {
                                        $fieldErrors[] = [
                                            'name' => $name,
                                            'status' => Json::encode($status),
                                        ];
                                    }
                                    return Json::encode(['fieldErrors' => $fieldErrors, 'data' => []]);
                                }
                                $model->save();
                                //单个字段更新的时候
                                if(count($requestData)==1 || !is_array($requestData)) {
                                    $requestData = Menu::find()->select([
                                        'id', 'name', 'parent', 'route', 'order', 'data'
                                    ])->where([
                                        'id' => $requestID,
                                    ])->one();
                                } else {
                                    $requestData['id'] = $requestID;
                                }
                                $data[] = $requestData;
                            }
                            //提交事务
                            $transaction->commit();
                            return Json::encode(['data' => $data]);
                        } catch (\Exception $e) {
                            $transaction->rollBack();
                            throw $e;
                        }
                    case "remove":
                        //多选则删除全部 用deleteAll()不会触发 event： EVENT_BEFORE_DELETE 和 EVENT_AFTER_DELETE
                        foreach(Yii::$app->request->post('data') as $removeID => $removeData) {
                            Menu::findOne($removeID)->delete();
                        }
                        return Json::encode($returnData);
                    default:
                        return Json::encode($returnData);
                };
            default:
                throw new \Exception('参数错误！');
        }
    }


}